version: 2.1
parameters:
  run_basedeployment:
    default: true
    type: boolean
  run_smoketesting:
    default: false
    type: boolean

defaults: &defaults
    docker:
      - image: cimg/python:3.11.0-browsers

test_defaults: &test_defaults
    docker:
      - image: docker:17.11.0-ce-git

install_dependency: &install_dependency
  name: Installation of build and deployment dependencies.
  command: |
    sudo apt install jq
    sudo apt update
    sudo apt install python3-pip
    sudo pip3 install awscli --upgrade
    sudo pip3 install docker==6.1.3
    sudo pip3 install docker-compose

install_test_dependency: &install_test_dependency
  name: Installation of build and deployment dependencies.
  command: |
    apk update
    apk add --no-cache bash openssl curl
    apk upgrade
    apk add --no-cache jq py-pip sudo
    sudo pip install awscli --upgrade

install_deploysuite: &install_deploysuite
  name: Installation of install_deploysuite.
  command: |
    git clone --branch v1.4.15 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
    cp ./../buildscript/master_deploy.sh .
    cp ./../buildscript/buildenv.sh .
    cp ./../buildscript/awsconfiguration.sh .

restore_cache_settings_for_build: &restore_cache_settings_for_build
  key: docker-node-modules-28-10-2020-{{ checksum "package-lock.json" }}

save_cache_settings: &save_cache_settings
  key: docker-node-modules-28-10-2020-{{ checksum "package-lock.json" }}
  paths:
    - node_modules

builddeploy_steps: &builddeploy_steps
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh $DEPLOY_ENV
            ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-buildvar
            echo awsenvconf >.dockerignore
            echo buildenvvar >>.dockerignore
      - run:
          name: "building image"
          command: |
            source buildenvvar
            ./build.sh ${APPNAME}
      - deploy:
          name: Running MasterScript.
          command: |
            #./awsconfiguration.sh $DEPLOY_ENV
            source awsenvconf
            ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s ${LOGICAL_ENV}-global-appvar,${LOGICAL_ENV}-${APPNAME}-appvar -i ${APPNAME}
            #curl --request POST \
            #--url https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline \
            #--header "Circle-Token: ${CIRCLE_TOKEN}" \
            #--header 'content-type: application/json' \
            #--data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"run_smoketesting":true, "run_basedeployment": false}}'

# Automated Smoke Testing
smoke_testing: &smoke_testing
  # Initialization.
  - checkout
  - setup_remote_docker
  - run: *install_test_dependency
  - run: *install_deploysuite
  # Restoration of node_modules from cache.
  - restore_cache: *restore_cache_settings_for_build
  - run:
      name: "configuring environment"
      command: |
        ./awsconfiguration.sh $DEPLOY_ENV
        ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-buildvar
  - run:
      name: "Run automation"
      no_output_timeout: 20m
      command: |
        source awsenvconf
        source buildenvvar
        ./test-automation/smoketest.sh
  - store_artifacts:
      path: ./test-automation/test-results

jobs:
  # Build & Deploy against development backend
  "build-dev":
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      NODE_ENV: "development"
      BABEL_ENV: "development"
      APPNAME: "challenge-engine-ui"
    steps: *builddeploy_steps

  "build-prod":
    <<: *defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"
      NODE_ENV: "production"
      BABEL_ENV: "production"
      APPNAME: "challenge-engine-ui"
    steps: *builddeploy_steps

  "smoke-testing-dev":
    <<: *test_defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "challenge-engine-ui"
    steps: *smoke_testing

  "smoke-testing-prod":
    <<: *test_defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"
      APPNAME: "challenge-engine-ui"
    steps: *smoke_testing

workflows:
  version: 2
  build:
    when: << pipeline.parameters.run_basedeployment >>
    jobs:
      # Development builds are executed on "develop" branch only.
      - "build-dev":
          context : org-global
          filters: &filters-dev
            branches:
              only: ['develop', 'multiround', 'release_0.20.9', 'metadata-fix']

      # Production builds are exectuted only on tagged commits to the
      # master branch.
      - "build-prod":
          context : org-global
          filters: &filters-prod
            branches:
              only: master

  Smoke Testing:
    when: << pipeline.parameters.run_smoketesting >>
    jobs:
      - Hold [Smoke-Testing]:
          type: approval
      - smoke-testing-dev:
          context : org-global
          requires:
            - Hold [Smoke-Testing]
          filters:
            <<: *filters-dev
      - smoke-testing-prod:
          context : org-global
          requires:
            - Hold [Smoke-Testing]
          filters:
            <<: *filters-prod
